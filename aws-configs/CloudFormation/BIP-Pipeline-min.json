{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Creates a base VPC for the application",
    "Parameters": {
        "InstanceType": {
            "Description": "WebServer EC2 instance type",
            "Type": "String",
            "Default": "m1.small",
            "AllowedValues": [
                "t1.micro",
                "m1.small",
                "m1.medium",
                "m1.large",
                "m1.xlarge",
                "m2.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "m3.xlarge",
                "m3.2xlarge",
                "c1.medium",
                "c1.xlarge",
                "cc1.4xlarge",
                "cc2.8xlarge",
                "cg1.4xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "255",
            "AllowedPattern": "[\\x20-\\x7E]*",
            "Default": "gkan",
            "ConstraintDescription": "can contain only ASCII characters."
        },
        "SSHLocation": {
            "Description": " The IP address range that can be used to SSH to the EC2 instances",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "AWSRegion": {
            "Description": "Available AWS Regions",
            "Type": "String",
            "Default": "us-west-2",
            "AllowedValues": [
                "us-east-1",
                "us-west-1",
                "us-west-2",
                "sa-east-1",
                "ap-southeast-1",
                "ap-southeast-1",
                "ap-northeast-1",
                "eu-west-1"
            ],
            "ConstraintDescription": "must be a valid AWS region."
        },
        "AppEnvironmentName": {
            "Description": "Environment name",
            "Type": "String",
            "Default": "development",
            "AllowedValues": [
                "development",
                "staging",
                "production",
                "qa"
            ],
            "ConstraintDescription": "Must be a valid environment name."
        },
        "VPCNetwork": {
            "Description": "Network portion of the VPC /16",
            "Type": "String",
            "Default": "10.11",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})",
            "ConstraintDescription": "Must be a valid network address for a /16. Example: 10.11"
        },
        "DBName": {
            "Default": "my_db",
            "Description": "The database name",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "64",
            "AllowedPattern": ".*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
        },
        "DBUsername": {
            "Default": "myuser",
            "Description": "The database admin account username",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "16",
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
        },
        "DBPassword": {
            "Default": "123password123",
            "Description": "The database admin account password",
            "Type": "String",
            "MinLength": "8",
            "MaxLength": "41",
            "AllowedPattern": "[a-zA-Z0-9]*",
            "ConstraintDescription": "must contain only alphanumeric characters."
        },
        "DBPort": {
            "Default": " 5432",
            "Description": "The database tcp port",
            "Type": "String",
            "MinLength": "4",
            "MaxLength": "6",
            "AllowedPattern": "[0-9]*",
            "ConstraintDescription": "must contain only numeric characters."
        },
        "DBClass": {
            "Default": "db.m1.small",
            "Description": "Database instance class",
            "Type": "String",
            "AllowedValues": [
                "db.m1.small",
                "db.m1.large",
                "db.m1.xlarge",
                "db.m2.xlarge",
                "db.m2.2xlarge",
                "db.m2.4xlarge"
            ],
            "ConstraintDescription": "must select a valid database instance type."
        },
        "DBVersion": {
            "Default": "9.3.3",
            "Description": "Database version of Postgres.",
            "Type": "String",
            "AllowedValues": [
                "9.3.3",
                "9.3.2",
                "9.3.1"
            ],
            "ConstraintDescription": "must select a valid database version."
        },
        "DBAllocatedStorage": {
            "Default": "400",
            "Description": "The size of the database (Gb)",
            "Type": "Number",
            "MinValue": "5",
            "MaxValue": "1024",
            "ConstraintDescription": "must be between 5 and 1024Gb."
        },
        "ConditionCreateReadReplica": {
            "Default": "false",
            "Description": "Create a read replica of the db or not",
            "Type": "String",
            "AllowedValues": [
                "true",
                "false"
            ],
            "ConstraintDescription": "Must either select true|false."
        },
        "AvailabilityZone1": {
            "Description": "Availability zone id: a, b, c, d, etc",
            "Type": "String",
            "Default": "a",
            "AllowedValues": [
                "a",
                "b",
                "c",
                "d",
                "e"
            ],
            "ConstraintDescription": "must be a availability zone."
        },
        "AvailabilityZone2": {
            "Description": "Availability zone id: a, b, c, d, etc",
            "Type": "String",
            "Default": "b",
            "AllowedValues": [
                "a",
                "b",
                "c",
                "d",
                "e"
            ],
            "ConstraintDescription": "must be a availability zone."
        },
        "AvailabilityZone3": {
            "Description": "Availability zone id: a, b, c, d, etc",
            "Type": "String",
            "Default": "c",
            "AllowedValues": [
                "a",
                "b",
                "c",
                "d",
                "e"
            ],
            "ConstraintDescription": "must be a availability zone."
        }
    },
    "Mappings": {
        "SubnetConfig": {
            "NetworkVPC": {
                "CIDR": ".0.0/16"
            },
            "SubnetPublicNet1": {
                "CIDR": ".11.0/24"
            },
            "SubnetPublicNet2": {
                "CIDR": ".12.0/24"
            },
            "SubnetPublicNet3": {
                "CIDR": ".13.0/24"
            },
            "SubnetPublic1d": {
                "CIDR": ".14.0/24"
            },
            "SubnetDirector1a": {
                "CIDR": ".21.0/24"
            },
            "SubnetDirector1b": {
                "CIDR": ".22.0/24"
            },
            "SubnetDirector1c": {
                "CIDR": ".23.0/24"
            },
            "SubnetDirector1d": {
                "CIDR": ".24.0/24"
            },
            "SubnetWorkerNet1": {
                "CIDR": ".31.0/24"
            },
            "SubnetWorkerNet2": {
                "CIDR": ".32.0/24"
            },
            "SubnetWorkerNet3": {
                "CIDR": ".33.0/24"
            },
            "SubnetWorker1d": {
                "CIDR": ".34.0/24"
            },
            "SubnetDatabaseNet1": {
                "CIDR": ".41.0/24"
            },
            "SubnetDatabaseNet2": {
                "CIDR": ".42.0/24"
            },
            "SubnetDatabaseNet3": {
                "CIDR": ".43.0/24"
            },
            "SubnetDatabase1d": {
                "CIDR": ".44.0/24"
            }
        },
        "AMIMappingUbuntu1204": {
            "us-east-1": {
                "AMI": "ami-fd20ad94"
            },
            "us-west-1": {
                "AMI": "ami-951945d0"
            },
            "us-west-2": {
                "AMI": "ami-78e76f48"
            },
            "eu-west-1": {
                "AMI": "ami-24506250"
            },
            "sa-east-1": {
                "AMI": "ami-3e3be423"
            },
            "ap-southeast-1": {
                "AMI": "ami-74dda626"
            },
            "ap-southeast-2": {
                "AMI": "ami-b3990e89"
            },
            "ap-northeast-1": {
                "AMI": "ami-dcfa4edd"
            }
        },
        "AMIMappingUbuntu1404MarketPlace": {
            "us-east-1": {
                "AMI": "ami-30519058"
            },
            "us-west-1": {
                "AMI": "ami-957070d0"
            },
            "us-west-2": {
                "AMI": "ami-5b58266b"
            },
            "eu-west-1": {
                "AMI": "ami-3986524e"
            },
            "sa-east-1": {
                "AMI": "ami-1189270c"
            },
            "ap-southeast-1": {
                "AMI": "ami-dad68888"
            },
            "ap-southeast-2": {
                "AMI": "ami-eb6d0ad1"
            },
            "ap-northeast-1": {
                "AMI": "ami-cb4610ca"
            }
        },
        "AMIMappingUbuntu1404Community": {
            "us-east-1": {
                "AMI": "ami-e84d8480"
            },
            "us-west-1": {
                "AMI": "ami-f1fdfeb4"
            },
            "us-west-2": {
                "AMI": "ami-8bb8c0bb"
            },
            "eu-west-1": {
                "AMI": "ami-"
            },
            "sa-east-1": {
                "AMI": "ami-"
            },
            "ap-southeast-1": {
                "AMI": "ami-"
            },
            "ap-southeast-2": {
                "AMI": "ami-"
            },
            "ap-northeast-1": {
                "AMI": "ami-"
            }
        },
        "AMIMappingNATInstance": {
            "us-east-1": {
                "AMI": "ami-ad227cc4"
            },
            "us-west-2": {
                "AMI": "ami-f032acc0"
            }
        }
    },
    "Conditions": {
        "ConditionDoCreateReadReplica": {
            "Fn::Equals": [
                {
                    "Ref": "ConditionCreateReadReplica"
                },
                "true"
            ]
        }
    },
    "Resources": {
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "VPCNetwork"
                            },
                            {
                                "Fn::FindInMap": [
                                    "SubnetConfig",
                                    "NetworkVPC",
                                    "CIDR"
                                ]
                            }
                        ]
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "AppEnvironmentName",
                        "Value": {
                            "Ref": "AppEnvironmentName"
                        }
                    }
                ]
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            }
        },
        "AttachGateway": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "RouteTablePublic": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ]
            }
        },
        "RouteTablePrivate": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ]
            }
        },
        "NetworkAcl": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            }
        },
        "RoutePublic": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "AttachGateway",
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteTablePublic"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "RoutePrivateNAT": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "AttachGateway",
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteTablePrivate"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "InstanceId": {
                    "Ref": "EC2InstanceNAT1a"
                }
            }
        },
        "InboundResponsePortsNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "RuleNumber": "102",
                "Protocol": "-1",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": {
                    "From": "1",
                    "To": "65535"
                },
                "Icmp": {
                    "Code": "-1",
                    "Type": "-1"
                }
            }
        },
        "OutBoundResponsePortsNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "RuleNumber": "102",
                "Protocol": "-1",
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": {
                    "From": "1",
                    "To": "65535"
                },
                "Icmp": {
                    "Code": "-1",
                    "Type": "-1"
                }
            }
        },
        "SecurityGroupDefaultGeneric": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "GroupDescription": "Default Generic SG",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Ref": "SSHLocation"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "SecurityGroupNAT": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "GroupDescription": "NAT SG",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "-1",
                        "FromPort": "1",
                        "ToPort": "65535",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "SubnetPublicNet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWSRegion"
                            },
                            {
                                "Ref": "AvailabilityZone1"
                            }
                        ]
                    ]
                },
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "VPCNetwork"
                            },
                            {
                                "Fn::FindInMap": [
                                    "SubnetConfig",
                                    "SubnetPublicNet1",
                                    "CIDR"
                                ]
                            }
                        ]
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "functionality",
                        "Value": "elb nat"
                    }
                ]
            }
        },
        "SubnetRouteTableAssociationSubnetPublicNet1": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "SubnetPublicNet1"
                },
                "RouteTableId": {
                    "Ref": "RouteTablePublic"
                }
            }
        },
        "SubnetNetworkAclAssociationSubnetPublicNet1": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "SubnetPublicNet1"
                },
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                }
            }
        },
        "SubnetPublicNet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWSRegion"
                            },
                            {
                                "Ref": "AvailabilityZone2"
                            }
                        ]
                    ]
                },
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "VPCNetwork"
                            },
                            {
                                "Fn::FindInMap": [
                                    "SubnetConfig",
                                    "SubnetPublicNet2",
                                    "CIDR"
                                ]
                            }
                        ]
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "functionality",
                        "Value": "elb nat"
                    }
                ]
            }
        },
        "SubnetRouteTableAssociationSubnetPublicNet2": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "SubnetPublicNet2"
                },
                "RouteTableId": {
                    "Ref": "RouteTablePublic"
                }
            }
        },
        "SubnetNetworkAclAssociationSubnetPublicNet2": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "SubnetPublicNet2"
                },
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                }
            }
        },
        "SubnetPublicNet3": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWSRegion"
                            },
                            {
                                "Ref": "AvailabilityZone3"
                            }
                        ]
                    ]
                },
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "VPCNetwork"
                            },
                            {
                                "Fn::FindInMap": [
                                    "SubnetConfig",
                                    "SubnetPublicNet3",
                                    "CIDR"
                                ]
                            }
                        ]
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "functionality",
                        "Value": "elb nat"
                    }
                ]
            }
        },
        "SubnetRouteTableAssociationSubnetPublicNet3": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "SubnetPublicNet3"
                },
                "RouteTableId": {
                    "Ref": "RouteTablePublic"
                }
            }
        },
        "SubnetNetworkAclAssociationSubnetPublicNet3": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "SubnetPublicNet3"
                },
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                }
            }
        },
        "SubnetWorkerNet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWSRegion"
                            },
                            {
                                "Ref": "AvailabilityZone1"
                            }
                        ]
                    ]
                },
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "VPCNetwork"
                            },
                            {
                                "Fn::FindInMap": [
                                    "SubnetConfig",
                                    "SubnetWorkerNet1",
                                    "CIDR"
                                ]
                            }
                        ]
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "functionality",
                        "Value": "Worker Layer"
                    }
                ]
            }
        },
        "SubnetRouteTableAssociationSubnetWorkerNet1": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "SubnetWorkerNet1"
                },
                "RouteTableId": {
                    "Ref": "RouteTablePrivate"
                }
            }
        },
        "SubnetNetworkAclAssociationSubnetWorkerNet1": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "SubnetWorkerNet1"
                },
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                }
            }
        },
        "SubnetWorkerNet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWSRegion"
                            },
                            {
                                "Ref": "AvailabilityZone2"
                            }
                        ]
                    ]
                },
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "VPCNetwork"
                            },
                            {
                                "Fn::FindInMap": [
                                    "SubnetConfig",
                                    "SubnetWorkerNet2",
                                    "CIDR"
                                ]
                            }
                        ]
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "functionality",
                        "Value": "Worker Layer"
                    }
                ]
            }
        },
        "SubnetRouteTableAssociationSubnetWorkerNet2": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "SubnetWorkerNet2"
                },
                "RouteTableId": {
                    "Ref": "RouteTablePrivate"
                }
            }
        },
        "SubnetNetworkAclAssociationSubnetWorkerNet2": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "SubnetWorkerNet2"
                },
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                }
            }
        },
        "SubnetWorkerNet3": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWSRegion"
                            },
                            {
                                "Ref": "AvailabilityZone3"
                            }
                        ]
                    ]
                },
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "VPCNetwork"
                            },
                            {
                                "Fn::FindInMap": [
                                    "SubnetConfig",
                                    "SubnetWorkerNet3",
                                    "CIDR"
                                ]
                            }
                        ]
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "functionality",
                        "Value": "Worker Layer"
                    }
                ]
            }
        },
        "SubnetRouteTableAssociationSubnetWorkerNet3": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "SubnetWorkerNet3"
                },
                "RouteTableId": {
                    "Ref": "RouteTablePrivate"
                }
            }
        },
        "SubnetNetworkAclAssociationSubnetWorkerNet3": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "SubnetWorkerNet3"
                },
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                }
            }
        },
        "SubnetDatabaseNet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWSRegion"
                            },
                            {
                                "Ref": "AvailabilityZone1"
                            }
                        ]
                    ]
                },
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "VPCNetwork"
                            },
                            {
                                "Fn::FindInMap": [
                                    "SubnetConfig",
                                    "SubnetDatabaseNet1",
                                    "CIDR"
                                ]
                            }
                        ]
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "functionality",
                        "Value": "Database Layer"
                    }
                ]
            }
        },
        "SubnetRouteTableAssociationSubnetDatabaseNet1": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "SubnetDatabaseNet1"
                },
                "RouteTableId": {
                    "Ref": "RouteTablePrivate"
                }
            }
        },
        "SubnetNetworkAclAssociationSubnetDatabaseNet1": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "SubnetDatabaseNet1"
                },
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                }
            }
        },
        "SubnetDatabaseNet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWSRegion"
                            },
                            {
                                "Ref": "AvailabilityZone2"
                            }
                        ]
                    ]
                },
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "VPCNetwork"
                            },
                            {
                                "Fn::FindInMap": [
                                    "SubnetConfig",
                                    "SubnetDatabaseNet2",
                                    "CIDR"
                                ]
                            }
                        ]
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "functionality",
                        "Value": "Database Layer"
                    }
                ]
            }
        },
        "SubnetRouteTableAssociationSubnetDatabaseNet2": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "SubnetDatabaseNet2"
                },
                "RouteTableId": {
                    "Ref": "RouteTablePrivate"
                }
            }
        },
        "SubnetNetworkAclAssociationSubnetDatabaseNet2": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "SubnetDatabaseNet2"
                },
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                }
            }
        },
        "SubnetDatabaseNet3": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWSRegion"
                            },
                            {
                                "Ref": "AvailabilityZone3"
                            }
                        ]
                    ]
                },
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "VPCNetwork"
                            },
                            {
                                "Fn::FindInMap": [
                                    "SubnetConfig",
                                    "SubnetDatabaseNet3",
                                    "CIDR"
                                ]
                            }
                        ]
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "functionality",
                        "Value": "Database Layer"
                    }
                ]
            }
        },
        "SubnetRouteTableAssociationSubnetDatabaseNet3": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "SubnetDatabaseNet3"
                },
                "RouteTableId": {
                    "Ref": "RouteTablePrivate"
                }
            }
        },
        "SubnetNetworkAclAssociationSubnetDatabaseNet3": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "SubnetDatabaseNet3"
                },
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                }
            }
        },
        "DBSubnetGroupMainDB": {
            "Type": "AWS::RDS::DBSubnetGroup",
            "Properties": {
                "DBSubnetGroupDescription": "Subnets available for the RDS DB Instance",
                "SubnetIds": [
                    {
                        "Ref": "SubnetDatabaseNet1"
                    },
                    {
                        "Ref": "SubnetDatabaseNet3"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Functionality",
                        "Value": "VPC Subnet Group"
                    }
                ]
            }
        },
        "DBSecurityGroupMainDB": {
            "Type": "AWS::RDS::DBSecurityGroup",
            "Properties": {
                "EC2VpcId": {
                    "Ref": "VPC"
                },
                "GroupDescription": "Ingress for main RDS DB.  Allowing all for now, but this should be changed.",
                "DBSecurityGroupIngress": [
                    {
                        "CIDRIP": "0.0.0.0/0"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Functionality",
                        "Value": "Main DB RDS Security Group"
                    }
                ]
            }
        },
        "DBInstanceMainDB": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "DBName": {
                    "Ref": "DBName"
                },
                "AllocatedStorage": {
                    "Ref": "DBAllocatedStorage"
                },
                "DBInstanceClass": {
                    "Ref": "DBClass"
                },
                "Engine": "postgres",
                "EngineVersion": {
                    "Ref": "DBVersion"
                },
                "MasterUsername": {
                    "Ref": "DBUsername"
                },
                "MasterUserPassword": {
                    "Ref": "DBPassword"
                },
                "Port": {
                    "Ref": "DBPort"
                },
                "DBSubnetGroupName": {
                    "Ref": "DBSubnetGroupMainDB"
                },
                "DBSecurityGroups": [
                    {
                        "Ref": "DBSecurityGroupMainDB"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Role",
                        "Value": "Primary"
                    },
                    {
                        "Key": "Functionality",
                        "Value": "Main DB"
                    },
                    {
                        "Key": "environmentName",
                        "Value": {
                            "Ref": "AppEnvironmentName"
                        }
                    }
                ]
            }
        },
        "DBInstanceMainDBReplica1": {
            "Type": "AWS::RDS::DBInstance",
            "Condition": "ConditionDoCreateReadReplica",
            "Properties": {
                "SourceDBInstanceIdentifier": {
                    "Ref": "DBInstanceMainDB"
                },
                "Port": {
                    "Ref": "DBPort"
                },
                "Tags": [
                    {
                        "Key": "Role",
                        "Value": "ReadRep"
                    },
                    {
                        "Key": "Functionality",
                        "Value": "Main DB"
                    }
                ]
            }
        },
        "EC2InstanceNAT1a": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "AMIMappingNATInstance",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMI"
                    ]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "SubnetId": {
                    "Ref": "SubnetPublicNet1"
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "SecurityGroupNAT"
                    }
                ],
                "SourceDestCheck": "false",
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "Functionality",
                        "Value": "NAT Box in subnet 1a"
                    },
                    {
                        "Key": "CreatedFrom",
                        "Value": "CloudFormation"
                    }
                ]
            }
        },
        "IPAddressNAT1a": {
            "Type": "AWS::EC2::EIP",
            "DependsOn": "AttachGateway",
            "Properties": {
                "Domain": "vpc",
                "InstanceId": {
                    "Ref": "EC2InstanceNAT1a"
                }
            }
        },
        "LaunchConfigBIPPipeline": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AMIMappingUbuntu1404Community",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMI"
                    ]
                },
                "SecurityGroups": [
                    {
                        "Ref": "SecurityGroupDefaultGeneric"
                    }
                ],
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -ex",
                                "\n",
                                "apt-get -y update",
                                "\n",
                                "apt-get install -y git",
                                "\n",
                                "curl -L https://www.opscode.com/chef/install.sh | sudo bash",
                                "\n",
                                "cd /tmp; git clone https://github.com/sekka1/gar-chef.git",
                                "\n",
                                "chef-solo -c /tmp/gar-chef/aws-configs/chef-solo/solo.rb -j /tmp/gar-chef/solo-run_lists/docker-base-server.json",
                                "\n",
                                "docker pull garland/aws-rest-api-server",
                                "\n",
                                "docker run -p 8080:8080 garland/aws-rest-api-server",
                                "\n"
                            ]
                        ]
                    }
                }
            }
        },
        "AutoScalingGroupBIPPipeline": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AvailabilityZones": {
                    "Fn::GetAZs": {
                        "Ref": "AWSRegion"
                    }
                },
                "LaunchConfigurationName": {
                    "Ref": "LaunchConfigBIPPipeline"
                },
                "MinSize": "1",
                "MaxSize": "1",
                "VPCZoneIdentifier": [
                    {
                        "Ref": "SubnetWorkerNet1"
                    },
                    {
                        "Ref": "SubnetWorkerNet2"
                    },
                    {
                        "Ref": "SubnetWorkerNet3"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Network",
                        "Value": "Private",
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "EnvironmentName",
                        "Value": {
                            "Ref": "AppEnvironmentName"
                        },
                        "PropagateAtLaunch": "true"
                    }
                ]
            }
        },
        "ScalingPolicyUpBIPPipeline": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "AutoScalingGroupBIPPipeline"
                },
                "Cooldown": "60",
                "ScalingAdjustment": "1"
            }
        },
        "ScalingPolicyDownBIPPipeline": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "AutoScalingGroupBIPPipeline"
                },
                "Cooldown": "60",
                "ScalingAdjustment": "-1"
            }
        },
        "CPUAlarmHighBIPPipeline": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Scale-up if CPU > 90% for 10 minutes",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Statistic": "Average",
                "Period": "300",
                "EvaluationPeriods": "2",
                "Threshold": "90",
                "AlarmActions": [
                    {
                        "Ref": "ScalingPolicyUpBIPPipeline"
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "AutoScalingGroupBIPPipeline"
                        }
                    }
                ],
                "ComparisonOperator": "GreaterThanThreshold"
            }
        },
        "CPUAlarmLowBIPPipeline": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Statistic": "Average",
                "Period": "300",
                "EvaluationPeriods": "2",
                "Threshold": "70",
                "AlarmActions": [
                    {
                        "Ref": "ScalingPolicyDownBIPPipeline"
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "AutoScalingGroupBIPPipeline"
                        }
                    }
                ],
                "ComparisonOperator": "LessThanThreshold"
            }
        }
    },
    "Outputs": {
        "VPC": {
            "Description": "VPC ID",
            "Value": {
                "Ref": "VPC"
            }
        },
        "NatBox": {
            "Description": "Nat servers",
            "Value": {
                "Fn::GetAtt": [
                    "EC2InstanceNAT1a",
                    "PublicIp"
                ]
            }
        }
    }
}